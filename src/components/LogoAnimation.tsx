"use client";

import { useEffect, useRef } from "react";
import { gsap } from "gsap";
import { DrawSVGPlugin } from "gsap/DrawSVGPlugin";

gsap.registerPlugin(DrawSVGPlugin);

export default function TrionnLetterLoader() {
  const containerRef = useRef(null);

  // Variation 1
  // useEffect(() => {
  //   const letters = [
  //     ".letter-t",
  //     ".letter-r",
  //     ".letter-i",
  //     ".letter-o",
  //     ".letter-n1",
  //     ".letter-n2",
  //     ".letter-r-mark",
  //   ];

  //   // reset state
  //   gsap.set(letters, {
  //     drawSVG: "0%",
  //     opacity: 0,
  //     scale: 1,
  //   });

  //   const masterTl = gsap.timeline({ repeat: -1, repeatDelay: 1 });

  //   letters.forEach((letter, i) => {
  //     const dir = i % 2 === 0 ? "0% 100%" : "100% 0%"; // alternate direction

  //     masterTl.to(
  //       letter,
  //       {
  //         duration: gsap.utils.random(0.6, 1),
  //         drawSVG: dir,
  //         opacity: 1,
  //         ease: "power3.out",
  //       },
  //       i * 0.25 // stagger start
  //     );

  //     // add a little "pop" when complete
  //     masterTl.to(
  //       letter,
  //       {
  //         duration: 0.25,
  //         transformOrigin: "center",
  //         ease: "back.out(2)",
  //         yoyo: true,
  //         repeat: 1,
  //       },
  //       `>-0.1`
  //     );
  //   });

  //   masterTl.to(
  //     letters,
  //     {
  //       duration: 0.4,
  //       transformOrigin: "center",
  //       ease: "sine.inOut",
  //       yoyo: true,
  //       repeat: 1,
  //     },
  //     "<"
  //   );

  //   // hold, then dissolve out with reverse draw
  //   masterTl.to({}, { duration: 0.5 }); // pause

  //   masterTl.to(letters, {
  //     duration: 0.7,
  //     drawSVG: "0%",
  //     opacity: 0,
  //     scale: 0.9,
  //     ease: "power2.inOut",
  //     stagger: {
  //       each: 0.1,
  //       from: "random",
  //     },
  //   });

  //   return () => masterTl.kill();
  // }, []);

  // Variation 2
  useEffect(() => {
    const letters = gsap.utils.toArray<SVGPathElement>([
      ".letter-t",
      ".letter-r",
      ".letter-i",
      ".letter-o",
      ".letter-n1",
      ".letter-n2",
      ".letter-r-mark",
    ]);

    gsap.set(letters, { drawSVG: "0%", fill: "none", opacity: 1 });

    const tl = gsap.timeline({ repeat: -1, repeatDelay: 1 });

    tl.to(letters, {
      drawSVG: "100%",
      duration: 1.5,
      stagger: 0.2,
      ease: "power2.out",
    });

    tl.to(
      letters,
      {
        fill: "#3B82F6",
        duration: 0.8,
        stagger: 0.1,
      },
      "-=1"
    );

    tl.to(letters, {
      opacity: 0,
      duration: 0.8,
      stagger: { each: 0.05, from: "end" },
    });
  }, []);


  return (
    <div className="flex items-center justify-center min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-slate-900">
      <div ref={containerRef} className="text-center">
        <svg
          width="400"
          height="76"
          viewBox="0 0 148 28"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
          className=""
        >
          {/* Your paths (letters) from earlier */}
          {/* T */}
          <path
            className="letter-t"
            d="M0.0526428 1.60414V3.18117H4.28722H8.5218V15.5906V28H10.247H11.9722V15.5906V3.18117H16.2329H20.4936V1.60414V0.0271063H10.2731H0.0526428V1.60414Z"
            fill="none"
            stroke="#3B82F6"
            strokeWidth="0.5"
          />
          {/* R */}
          <path
            className="letter-r"
            d="M25.6692 14.0136V28H27.4206H29.1719V15.5874V3.17491L32.8706 3.19554C36.3839 3.21514 36.5942 3.2216 37.066 3.32403C39.0553 3.75619 40.2252 4.57195 40.919 6.01067C41.2764 6.75156 41.4092 7.33972 41.4431 8.33107C41.5029 10.0811 41.0794 11.3419 40.0886 12.3626C39.2495 13.2271 38.2256 13.7273 36.7 14.0183C36.3563 14.0838 35.8144 14.1086 34.3083 14.1277C33.2372 14.1413 32.3609 14.1629 32.3609 14.1759C32.3609 14.2194 33.9683 16.6208 37.8144 22.3228L41.6404 27.995L43.7471 27.9975L45.8539 28L45.519 27.5217C45.3348 27.2586 43.7533 24.961 42.0046 22.4158C40.2559 19.8705 38.7112 17.6268 38.572 17.4297C38.4327 17.2325 38.3369 17.0561 38.3589 17.0376C38.381 17.0191 38.6461 16.9402 38.948 16.8621C41.3667 16.2368 43.1819 14.8572 44.1869 12.8802C44.474 12.3154 44.7858 11.3536 44.9158 10.631C45.0532 9.86829 45.1032 8.28826 45.0162 7.4636C44.6028 3.54678 42.2946 1.02601 38.4252 0.26547C37.2724 0.0388945 36.9127 0.0271063 31.1494 0.0271063H25.6692V14.0136Z"
            fill="none"
            stroke="#3B82F6"
            strokeWidth="0.5"
          />
          {/* I Letter */}
          <path
            className="letter-i"
            d="M51.0244 14.0136V28H52.7757H54.5271V14.0136V0.0271063H52.7757H51.0244V14.0136Z"
            fill="none"
            stroke="#3B82F6"
            strokeWidth="0.5"
          />
          {/* O Letter (Circle) */}
          <path
            className="letter-o"
            d="M72.7248 0.0275702C70.8595 0.181964 69.1196 0.667587 67.4311 1.50507C66.0804 2.17512 64.9807 2.97036 63.8304 4.10892C62.6022 5.32479 61.8609 6.34815 61.1131 7.86055C59.199 11.7314 59.1884 16.1763 61.0838 20.0631C61.7636 21.4573 62.5734 22.6061 63.6489 23.7023C66.9241 27.0405 71.5821 28.5607 76.1705 27.7889C81.7317 26.8534 86.2293 22.7298 87.5606 17.3457C87.8532 16.1621 87.9495 15.3414 87.9513 14.0136C87.9536 12.3367 87.7546 11.0755 87.2537 9.5927C86.5386 7.47581 85.4546 5.73239 83.8669 4.14595C81.6455 1.92611 78.766 0.513454 75.6356 0.107562C74.8682 0.0080801 73.436 -0.0312711 72.7248 0.0275702ZM74.8188 3.54497C76.6183 3.72304 78.2017 4.27407 79.6731 5.23436C82.8728 7.32245 84.6893 10.9405 84.4246 14.698C84.159 18.4668 81.9128 21.7746 78.4961 23.428C77.0015 24.1513 75.533 24.484 73.835 24.484C71.82 24.484 69.9551 23.9649 68.2397 22.9264C64.9312 20.9236 62.9435 17.0799 63.2467 13.2714C63.4094 11.2289 64.0314 9.53076 65.2431 7.82131C65.6885 7.19287 66.9481 5.94873 67.5968 5.49645C69.7684 3.98245 72.3071 3.29642 74.8188 3.54497Z"
            fill="none"
            stroke="#3B82F6"
            strokeWidth="0.5"
          />
          {/* First N Letter */}
          <path
            className="letter-n1"
            d="M93.1611 14.0136V28H94.8862H96.6112L96.6244 16.9479L96.6376 5.89573L96.9631 6.33523C97.1421 6.57695 98.4578 8.40346 99.887 10.3941C102.655 14.2503 104.487 16.8007 106.647 19.8046C107.383 20.8284 109.008 23.0908 110.258 24.8322L112.53 27.9984L114.295 27.9992L116.059 28V27.6359V27.2717L114.56 25.1669C112.306 22.0028 110.021 18.8044 105.021 11.8161C102.46 8.23759 102.227 7.9106 98.9461 3.32336L96.5888 0.0271063H94.8749H93.1611V14.0136Z"
            fill="none"
            stroke="#3B82F6"
            strokeWidth="0.5"
          />
          {/* Second N Letter */}
          <path
            className="letter-n2"
            d="M112.609 8.36789V16.7087L113.531 17.9981C114.038 18.7073 114.809 19.7853 115.243 20.3937L116.033 21.4998L116.059 13.6978L116.085 5.89573L116.796 6.87814C117.187 7.41847 118.608 9.39622 119.956 11.2731C121.303 13.1501 123.04 15.5699 123.817 16.6506C124.593 17.7312 125.713 19.2901 126.305 20.1148C126.896 20.9396 128.413 23.0511 129.674 24.8072L131.968 28H133.738H135.507V27.6133V27.2267L134.863 26.3336C132.847 23.5402 130.447 20.1944 127.064 15.4613C125.315 13.0142 123.65 10.6869 122.089 8.50688C119.72 5.19744 116.314 0.432791 116.175 0.233775L116.033 0.0310354L114.321 0.0290724L112.609 0.0271063V8.36789ZM132.004 8.34048V16.6538L132.596 17.4795C132.921 17.9336 133.699 19.0206 134.325 19.8951C134.95 20.7696 135.472 21.4851 135.484 21.4851C135.497 21.4851 135.507 16.657 135.507 10.7561V0.0271063H133.755H132.004V8.34048Z"
            fill="none"
            stroke="#3B82F6"
            strokeWidth="0.5"
          />
          {/* R Trademark */}
          <path
            className="letter-r-mark"
            d="M145.339 0.519757C144.683 0.173253 144.011 0 143.322 0C142.634 0 141.962 0.173253 141.306 0.519757C140.65 0.862726 140.137 1.35596 139.767 1.99947C139.401 2.63944 139.218 3.3077 139.218 4.00424C139.218 4.69372 139.399 5.35667 139.762 5.99311C140.124 6.62954 140.63 7.12455 141.278 7.47813C141.931 7.82816 142.612 8.00318 143.322 8.00318C144.033 8.00318 144.712 7.82816 145.361 7.47813C146.013 7.12455 146.519 6.62954 146.878 5.99311C147.24 5.35667 147.421 4.69372 147.421 4.00424C147.421 3.3077 147.238 2.63944 146.872 1.99947C146.506 1.35596 145.995 0.862726 145.339 0.519757ZM141.637 1.09785C142.184 0.807921 142.746 0.662955 143.322 0.662955C143.895 0.662955 144.455 0.807921 145.002 1.09785C145.549 1.38425 145.975 1.79617 146.28 2.3336C146.588 2.8675 146.742 3.42438 146.742 4.00424C146.742 4.58057 146.591 5.13392 146.291 5.66428C145.99 6.19111 145.568 6.60303 145.024 6.90003C144.48 7.1935 143.913 7.34023 143.322 7.34023C142.732 7.34023 142.164 7.1935 141.621 6.90003C141.077 6.60303 140.653 6.19111 140.349 5.66428C140.048 5.13392 139.898 4.58057 139.898 4.00424C139.898 3.42438 140.052 2.8675 140.36 2.3336C140.668 1.79617 141.094 1.38425 141.637 1.09785ZM144.149 5.97007H144.956L143.943 4.54174V4.52544C144.522 4.36614 144.811 3.97873 144.811 3.36323C144.811 2.98668 144.698 2.68436 144.472 2.45626C144.249 2.22816 143.911 2.11411 143.458 2.11411H142V5.97007H142.674V4.59605H143.202L144.149 5.97007ZM142.674 4.00408V2.70065H143.358C143.599 2.70065 143.785 2.75858 143.915 2.87444C144.049 2.98668 144.115 3.14599 144.115 3.35236C144.115 3.5515 144.047 3.71081 143.909 3.83029C143.772 3.94615 143.573 4.00408 143.314 4.00408H142.674Z"
            fill="none"
            stroke="#3B82F6"
            strokeWidth="0.3"
          />
        </svg>
      </div>
    </div>
  );
}
